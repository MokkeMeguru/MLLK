["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$bouncer.core","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","^<","^<","~$goog.string.format","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$wrap-chain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","~:line",133,"~:column",8,"~:end-line",133,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^K",[["~$old-state","~$message-fn","~$&","~$fs"]]]]],"~:doc","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",[["^K",["^M","^N","^O"]]],"^J",["^K",[["^M","^N","~$&","^O"]]],"~:arglists-meta",["^K",[null]]]],"^I",true,"^7","~$bouncer.core/wrap-chain","^R",true,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",18,"^Q",["^ ","^R",true,"^S",2,"^T",[["^K",["^M","^N","^O"]]],"^J",["^K",[["^M","^N","~$&","^O"]]],"^U",["^K",[null]]],"^T",[["^K",["^M","^N","^O"]]],"~:protocol-impl",null,"^U",["^K",[null]],"^F",1,"^E",133,"^G",133,"^S",2,"~:fn-var",true,"^J",["^K",[["^M","^N","~$&","^O"]]],"^P","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"],"~$wrap",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",85,"^F",8,"^G",85,"^H",12,"^I",true,"^J",["^K",["^L",["^K",[["^N","~$acc",["~$pred","~$k","~$&","~$args"]]]]]],"^P","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"^I",true,"^7","~$bouncer.core/wrap","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",12,"^T",["^K",[["^N","^Z","~$p__87109"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",85,"^G",85,"^S",3,"^X",true,"^J",["^K",["^L",["^K",[["^N","^Z",["^[","~$k","~$&","^10"]]]]]],"^P","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"~$validate*",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",150,"^F",8,"^G",150,"^H",17,"^I",true,"^J",["^K",["^L",["^K",[["^N","~$m","^O"]]]]],"^P","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"^I",true,"^7","~$bouncer.core/validate*","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",17,"^T",["^K",[["^N","~$m","^O"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",150,"^G",150,"^S",3,"^X",true,"^J",["^K",["^L",["^K",[["^N","~$m","^O"]]]]],"^P","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"~$valid?",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",221,"^F",7,"^G",221,"^H",13,"^J",["^K",["^L",["^K",[["~$&","^10"]]]]],"^P","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise.","^Q",["^ ","^R",true,"^S",0,"^T",[["^K",["^10"]]],"^J",["^K",[["~$&","^10"]]],"^U",["^K",[null]]]],"^7","~$bouncer.core/valid?","^R",true,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",13,"^Q",["^ ","^R",true,"^S",0,"^T",[["^K",["^10"]]],"^J",["^K",[["~$&","^10"]]],"^U",["^K",[null]]],"^T",[["^K",["^10"]]],"^W",null,"^U",["^K",[null]],"^F",1,"^E",221,"^G",221,"^S",0,"^X",true,"^J",["^K",[["~$&","^10"]]],"^P","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise."],"~$validate",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",178,"^F",7,"^G",178,"^H",15,"^J",["^K",["^L",["^K",[["~$&","^10"]]]]],"^P","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n","^Q",["^ ","^R",true,"^S",0,"^T",[["^K",["^10"]]],"^J",["^K",[["~$&","^10"]]],"^U",["^K",[null]]]],"^7","~$bouncer.core/validate","^R",true,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",15,"^Q",["^ ","^R",true,"^S",0,"^T",[["^K",["^10"]]],"^J",["^K",[["~$&","^10"]]],"^U",["^K",[null]]],"^T",[["^K",["^10"]]],"^W",null,"^U",["^K",[null]],"^F",1,"^E",178,"^G",178,"^S",0,"^X",true,"^J",["^K",[["~$&","^10"]]],"^P","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n"],"~$build-multi-step",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",24,"^F",8,"^G",24,"^H",24,"^I",true,"^J",["^K",["^L",["^K",[["~$key-or-vec","~$fn-vec"],["^1:",["~$f-or-list","~$&","~$rest"],"^Z"]]]]],"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]],"^J",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]],"^U",["^K",[null,null]]]],"^I",true,"^7","~$bouncer.core/build-multi-step","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",24,"^Q",["^ ","^R",false,"^S",3,"^T",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]],"^J",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]],"^U",["^K",[null,null]]],"^T",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",24,"^G",24,"^S",3,"^X",true,"^J",["^K",[["^1:","^1;"],["^1:",["^1<","~$&","^1="],"^Z"]]]],"~$build-steps",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",64,"^F",8,"^G",64,"^H",19,"^I",true,"^J",["^K",["^L",["^K",[[["~$head","~$&","~$tail","~:as","~$forms"]]]]]]],"^I",true,"^7","~$bouncer.core/build-steps","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",19,"^T",["^K",[["~$p__87100"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",64,"^G",64,"^S",1,"^X",true,"^J",["^K",["^L",["^K",[[["^1@","~$&","^1A","^1B","^1C"]]]]]]],"~$pre-condition-met?",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",82,"^F",8,"^G",82,"^H",26,"^I",true,"^J",["^K",["^L",["^K",[["~$pre-fn","~$map"]]]]]],"^I",true,"^7","~$bouncer.core/pre-condition-met?","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",26,"^T",["^K",[["^1G","^1H"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",82,"^G",82,"^S",2,"^X",true,"^J",["^K",["^L",["^K",[["^1G","^1H"]]]]]],"~$merge-path",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",40,"^F",8,"^G",40,"^H",18,"^I",true,"^J",["^K",["^L",["^K",[["~$parent-key","~$validations-map"]]]]],"^P","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"^I",true,"^7","~$bouncer.core/merge-path","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",18,"^T",["^K",[["^1K","^1L"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",40,"^G",40,"^S",2,"^X",true,"^J",["^K",["^L",["^K",[["^1K","^1L"]]]]],"^P","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"~$with-default-messages",["^ ","^B",null,"^C",["^ ","^D","/home/elect/GitHub/fool/.cljs_rhino_repl/bouncer/core.cljc","^E",165,"^F",7,"^G",165,"^H",28,"^J",["^K",["^L",["^K",[["~$error"]]]]],"^P","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"],"^7","~$bouncer.core/with-default-messages","^R",false,"^D",".cljs_rhino_repl/bouncer/core.cljc","^H",28,"^T",["^K",[["^1O"]]],"^W",null,"^U",["^K",[null,null]],"^F",1,"^E",165,"^G",165,"^S",1,"^X",true,"^J",["^K",["^L",["^K",[["^1O"]]]]],"^P","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:args","~:path","~:pre","~:else","~:value","~:bouncer.core/errors","~:optional","~:metadata","~:default-message-format","~:message"]],"~:order",["^1X","^1Z","^1[","^21","^22","^1W","^1V","^1Y","^1U","^20"]],"^P","The `core` namespace provides the two main entry point functions in bouncer:\n\n  - `validate`\n  - `valid?`\n\n\nAll other functions are meant for internal use only and shouldn't be relied upon.\n\nThe project [README](https://github.com/leonardoborges/bouncer/blob/master/README.md) should get you started,\nit's pretty comprehensive.\n\n\nIf you'd like to know more about the motivation behind `bouncer`, check the\n[announcement post](http://www.leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/)."]